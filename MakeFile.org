# CHOIX DE L'AFFICHAGE !!! ( ncurses, sdl, sfml )
LIB_AFF = ncurses
# Compilateur
CXX = g++
# Flags de Compilation
CFLAGS := -Wall
#Flags pour le linker
LDFLAGS :=
# Mode Debug (décommenter cette ligne pour activer le mode debug forcé)
#DEBUG = 1
# Lancer automatiquement gdb après chaque compilation en mode debug ( make exec ! )
DEBUG_AUTO_EXEC_GDB = oui

# Fichiers contenant les dépendances
DEP = .depend
# Fichiers .cpp
SRC := main.cpp map.cpp perso.cpp partie.cpp clavier.cpp options.cpp bonus.cpp
# Fichier de sortie final
EXEC_NAME = bomberman.exe

# Zones de sorties
BIN_DIR = bin
OBJ_DIR = obj
DOXYGEN_DIR = doc


################################################################################
# v NE PAS TOUCHER A CE BLOCK v
# Determine l'OS sur lequel on tourne
ifeq ($(SHELL), sh.exe)
	OS = win
	# Commandes Spé aux OS
	CMD_DEL = del /F
	CMD_CLEAR = cls
	CMD_LINEFEED = @echo. && @echo . > NUL
	CMD_SED = "%CD%\.tools\sed.exe"
	ECHO=@echo $(1)$(if $(2),$(ECHO_,)$(2))$(if $(3),$(ECHO_,)$(3))$(if $(4),$(ECHO_,)$(4))$(if $(5),$(ECHO_,)$(5))
	NULL = NUL
else
	OS = linux
	# Commandes Spé aux OS
	CMD_DEL = /bin/rm -f
	CMD_CLEAR = clear
	CMD_LINEFEED = @echo ""
	CMD_SED = /bin/sed
	ECHO=@echo "$(1)$(if $(2),$(ECHO_,)$(2))$(if $(3),$(ECHO_,)$(3))$(if $(4),$(ECHO_,)$(4))$(if $(5),$(ECHO_,)$(5))"
	NULL = /dev/null
endif
# La règle no_clear permet de supprimer la commande d'effacement d'écran
ifneq ($(findstring no_clear,$(MAKECMDGOALS)),)
	CMD_CLEAR =
endif
# Les ECHO_XXX sont là pour permettre le passage de certains caractères (dans des fonctions) qui ne passent pas sinon
ECHO_,=,
ECHO_)=)
ECHO_(=(

# Determine si un la lib a été spécifié
ifeq ($(findstring sdl,$(MAKECMDGOALS)) ,ncurses)
	LIB_AFF = ncurses
else
	ifeq ($(findstring sdl,$(MAKECMDGOALS)) ,sdl)
		LIB_AFF = sdl
	else
		ifeq ($(findstring sdl,$(MAKECMDGOALS)) ,sfml)
			LIB_AFF = sfml
		endif
	endif
endif

# Ajustement des directives de précompilation
CFLAGS += -D__LIB_${LIB_AFF}__

# Met en mode debug ou non
USE_DEBUG = $(if $(or $(findstring debug,$(MAKECMDGOALS)),$(DEBUG)) ,-ggdb)
ifneq ($(USE_DEBUG),)
	CFLAGS += $(USE_DEBUG)
endif

# Lib a utiliser ( /!\ Peut changer en fonction de l'OS OU du système d'affichage /!\ )
ifeq ($(LIB_AFF), ncurses)
#	NCURSES
	ifeq ($(OS),win)
		LDFLAGS += -lpdcurses
	else
		LDFLAGS += -lncurses
	endif
	SRC += moteur_ncurses.cpp
else
	ifeq ($(LIB_AFF), sdl)
# 		SDL
		ifeq ($(OS), win)
			LDFLAGS += -lmingw32 -lSDLmain
		endif
#		NOTE: -mwindows permet de virer la console
		LDFLAGS += -lSDL -lSDL_ttf -lSDL_image $(if $(USE_DEBUG) ,,-mwindows)
		SRC += moteur_sdl.cpp
	else
#		SFML
		LDFLAGS +=
	endif
endif

# Fichiers Objets ( *.o ) dans un dossier obj/
OBJ_FILES = $(addprefix $(OBJ_DIR)/,$(SRC:.cpp=.o))

# ^ NE PAS TOUCHER A CE BLOCK ^
################################################################################

# Simple Make
all: $(BIN_DIR)/$(EXEC_NAME)
$(BIN_DIR)/$(EXEC_NAME): $(BIN_DIR) $(OBJ_DIR) $(if $(USE_DEBUG) ,$(OBJ_DIR)/config_${OS}_debug_${LIB_AFF}, $(OBJ_DIR)/config_${OS}_release_${LIB_AFF}) $(DEP) $(OBJ_FILES)
	$(CMD_LINEFEED)
	@echo Creation de l executable $(if $(USE_DEBUG) ,en mode Debug)
	$(CXX) -o $(BIN_DIR)/$(EXEC_NAME) $(OBJ_FILES) $(LDFLAGS)


# Génère et inclut les dépendances
-include $(DEP)


# Génération des fichier .o ( dans le repertoire $(OBJ_DIR) )
$(OBJ_DIR)/%.o: %.cpp
	$(CMD_LINEFEED)
	@echo Generation de $@ $(if $(USE_DEBUG) ,en mode Debug)
	$(CXX) $(CFLAGS) -o $@ -c $<


# Système de génération des dépendances
$(DEP): $(SRC) $(subst main.h,,$(SRC:.cpp=.h))
	$(CMD_CLEAR)
	@echo Generation des dependances
# Le sed est la pour permettre de mofidier les regles main.o:... --> obj/main.o:...
	$(CXX) $(CFLAGS) -MM $(SRC) | $(CMD_SED) -r "s/([^.]*)\.o:/$(OBJ_DIR)\/\1.o:/" > $(DEP)


# Auto création du dossier BIN_DIR
$(BIN_DIR):
	@echo Creation du dossier "$(BIN_DIR)"
	mkdir $(BIN_DIR)


# Auto création du dossier OBJ_DIR
$(OBJ_DIR):
	@echo Creation du dossier "$(OBJ_DIR)"
	mkdir $(OBJ_DIR)


################################################################################
# Règles utilisable par appel externe ( make XXX )
################################################################################

# Make depend ( régénération manuel des dep )
.PHONY: depend dep exec valgrind clean clean_dep pfiles help debug ncurses sdl sfml $(DOXYGEN_DIR) $(DOXYGEN_DIR)/Doxyfile doxygen $(OBJ_DIR)/config.release $(OBJ_DIR)/config.debug no_clear
depend: $(DEP)
dep: $(DEP)


# Désactive la commande $(CMD_CLEAR)
no_clear:


# Lancer le prog
exec: $(BIN_DIR)/$(EXEC_NAME)
ifeq ($(OS), linux)
	cd $(BIN_DIR) && $(if $(and $(USE_DEBUG),$(DEBUG_AUTO_EXEC_GDB)), gdb $(EXEC_NAME), ./$(EXEC_NAME))
else
	cd $(BIN_DIR) && $(if $(and $(USE_DEBUG),$(DEBUG_AUTO_EXEC_GDB)), gdb $(EXEC_NAME), $(EXEC_NAME))
endif


# Regle pour le mode debug
debug: $(BIN_DIR)/$(EXEC_NAME)


# Regle pour le mode ncurses
ncurses: $(BIN_DIR)/$(EXEC_NAME)


# Regle pour le mode sdl
sdl: $(BIN_DIR)/$(EXEC_NAME)


# Regle pour le mode sfml
sfml: $(BIN_DIR)/$(EXEC_NAME)


# Cette règle permet de savoir si on était en mode debug ou pas
# Si on était en release et qu'on passe en debug -> clean all
# Si on était en debug et qu'on passe en release -> clean all
$(OBJ_DIR)/config_%:
	$(CMD_LINEFEED)
	@echo "Changement de type de compilation Debug <-> Release & Ncurses <-> SDL <-> SFML"
	@$(MAKE) --silent --no-print-directory --makefile=MakeFile.org clean no_clear
	@echo .>$@


# Permet de vérifier la présence de la commande sed
$(CMD_SED):
	$(warning Veuillez installer sed sur votre machine)


# Valgrind
valgrind: $(BIN_DIR)/$(EXEC_NAME)
	@echo Lancement de Valgrind
	cd $(BIN_DIR) && valgrind --tool=memcheck --leak-check=full ./$(EXEC_NAME)


# Doxygen
doxygen: $(DOXYGEN_DIR)/Doxyfile
	@echo Lancement de Doxygen
	cd $(DOXYGEN_DIR) && doxygen


# Pour créer une archive tar bz2
tar:
	$(CMD_DEL) bomberman.tar.bz2
	tar -jcvf bomberman.tar.bz2 *.cpp *.h MakeFile.org makefile $(DOXYGEN_DIR)/Doxyfile TODO.txt _CodingStyle_.txt $(BIN_DIR)/map/*.map $(BIN_DIR)/Chicken\ Butt.ttf $(BIN_DIR)/images/*.png


# Si pas de doxygen -> OUT
$(DOXYGEN_DIR)/Doxyfile:
	$(CMD_CLEAR)
#	$(error Veuillez  Creer le dossier $(DOXYGEN_DIR) et le fichier de configuration $(DOXYGEN_DIR)/Doxyfile)


# Make clean
clean:
	$(CMD_CLEAR)
	@echo Suppression des fichiers .o, (de l executable et) du fichier des dependances
	$(CMD_DEL) $(DEP)
# Pour supprimer les .o dans le dossier obj ( bizari de windows ... )
	cd $(OBJ_DIR) && $(CMD_DEL) *.o config_*


# Supprime aussi les executables obtenu
clean_all: clean
	cd $(BIN_DIR) && $(CMD_DEL) *.exe


# Make clean dep
clean_dep:
	$(CMD_CLEAR)
	@echo Suppression du fichier de dependances
	$(CMD_DEL) $(DEP)	$(call ECHO ,	doxygen:	Execute doxygen sur le projet.)


# Affiche les fichiers utilisés
pfiles:
	$(CMD_CLEAR)
	$(call ECHO ,=================================== Bomberman ==================================)
	$(call ECHO ,Sources:)
	$(call ECHO ,	$(SRC))
	$(call ECHO ,Dependances:)
	@$(CXX) $(CFLAGS) -MM $(SRC) | $(CMD_SED) -e "s/^/	/"
	$(call ECHO ,Executable obtenu:)
	$(call ECHO ,	$(BIN_DIR)/$(EXEC_NAME))


# Affichage de l'aide
help:
	$(CMD_CLEAR)
	$(call ECHO ,Aide du MakeFile de Bomberman)
	$(CMD_LINEFEED)
	$(call ECHO ,make ARG [no_clear])
	$(call ECHO ,	all:		Construit tout le projet.)
	$(call ECHO ,	debug:		Construit tout le projet en debug (gdb).)
	$(call ECHO ,	ncurses:	Construit tout le projet avec la lib Ncurses.)
	$(call ECHO ,	sdl:		Construit tout le projet avec la lib SDL.)
	$(call ECHO ,	sfml:		Construit tout le projet avec la lib SFML.)
	$(call ECHO ,	clean:		Supprime les fichiers .o, et le fichier de)
	$(call ECHO ,			dependances.)
	$(call ECHO ,	clean_all:	Supprime les fichiers .o, l'executable et le fichier de)
	$(call ECHO ,			dependances.)
	$(call ECHO ,	clean_dep:	Supprime le fichier des dependances.)
	$(call ECHO ,	depend:		Construit le fichier des dependances - Le fichier est :)
	$(call ECHO ,			supprime a chaque fin de compilations et est donc auto)
	$(call ECHO ,			regenere a chaque compilation)
	$(call ECHO , 	dep:		IDEM {make depend}.)
	$(call ECHO ,	valgrind:	Compil le projet puis lance valgrind sur le projet.)
	$(call ECHO ,	tar:		Archive les fichiers dans un fichier tar.bz2)
	$(call ECHO ,	doxygen:	Execute doxygen sur le projet.)
	$(call ECHO ,	no_clear:	Annule tous les effacements d'ecran)
	$(call ECHO ,	exec:		{make all} et execute l'executable obtenu.)
	$(call ECHO ,	pfiles:		Affiche les fichiers utilises)
	$(call ECHO ,	help:		Affiche cette aide.)
	$(CMD_LINEFEED)
	$(call ECHO ,/!\ Si MAKE n'a pas d'ARG alors IDEM a {make all} avec la lib $(LIB_AFF).)
	$(call ECHO ,/!\ L'outil sed est utilise par ce makefile pour la generation des dependances !)
